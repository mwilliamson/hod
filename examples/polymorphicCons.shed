// name: polymorphic cons
// stdout:
//   1
//   2
//   3

union List[T] = Cons[T] | Nil;
shape Cons[T] memberOf List {
    head: T,
    tail: List[T],
}
shape Nil memberOf List {}
val nil = Nil();

fun cons[T](head: T, tail: List[T]) -> List[T] {
    Cons(head=head, tail=tail);
}

fun printInts(list: List[Int]) !io -> Unit {
    if (list is Cons[Int]) {
        print(intToString(list.head) + "\n");
        printInts(list.tail);
    };
}

fun main() !io -> Unit {
    val list = cons(1, cons(2, cons(3, nil)));
    printInts(list);
}
