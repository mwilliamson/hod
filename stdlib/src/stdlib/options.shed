union Option[+T] = Some[T] | None;
shape Some[+T] memberOf Option {
    value: T,
}
shape None memberOf Option {
}

fun some[T](value: T) -> Option[T] {
    Some(value = value)
}
val none = None();

fun map[T, R](func: (T) -> R, option: Option[T]) -> Option[R] {
    if (option is Some[T]) {
        some(func(option.value))
    } else {
        none
    }
}
