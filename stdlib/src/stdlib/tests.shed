import .matchers;
import .options;


shape AssertionError {
    message: String,
}

fun fail(message: String) -> AssertionResult {
    AssertionResult(error = options.some(AssertionError(message = message)))
}

fun assert(value: Bool) -> AssertionResult {
    if (value) {
        AssertionResult(error = options.none)
    } else {
        fail("value was false")
    }
}

fun assertThat[T](value: T, matcher: matchers.Matcher[T]) -> AssertionResult {
    val result = matcher.match(value);
    if (result is matchers.Failure) {
        val message = "expected " + matcher.description + "\nbut " + result.message;
        val error = AssertionError(message = message);
        AssertionResult(error = options.some(error))
    } else {
        // TODO: check type of result
        AssertionResult(error = options.none)
    }
}

shape AssertionResult {
    error: options.Option[AssertionError],
}

shape TestCase {
    name: String,
    run: () -> AssertionResult,
}

fun testCase(name: String, run: () -> AssertionResult) -> TestCase {
    TestCase(name = name, run = run)
}

shape TestResult {
    name: String,
    error: options.Option[AssertionError],
}

fun main() -> Int {
    0
}

val greenCode = "\u001B[32m";
val redCode = "\u001B[31m";
val blackCode = "\u001B[39m";

fun runTests(tests: List[TestCase]) !Io -> Int {
    val results = map(runTest, tests);
    print("\n");
    forEach(printFailure, results);
    val isSuccess = all(map(
        fun (result: TestResult) => result.error is options.None,
        results
    ));
    if (isSuccess) {
        0
    } else {
        1
    }
}

fun printFailure(result: TestResult) !Io -> Unit {
    val error = result.error;
    if (error is options.Some[AssertionError]) {
        print("\n");
        print(redCode);
        print("✖ ");
        print(result.name);
        print(":\n");
        print(error.value.message);
        print(blackCode);
        print("\n\n");
    }
}

fun runTest(test: TestCase) !Io -> TestResult {
    val result = test.run();
    val error = result.error;

    if (error is options.Some[AssertionError]) {
        print(redCode);
        print("✖");
    } else {
        print(greenCode);
        print("✔");
    }
    print(blackCode);

    TestResult(name = test.name, error = result.error)
}
