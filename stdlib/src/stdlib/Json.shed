import stdlib.Lists;
import stdlib.Sequences;
import stdlib.strings.CodePoints;


union JsonValue = JsonObject | JsonArray | JsonNumber | JsonString | JsonBoolean | JsonNull;

shape JsonObject {
    properties: List[JsonProperty],
}

fun object(properties: List[JsonProperty]) -> JsonValue {
    JsonObject(properties = properties)
}

shape JsonProperty {
    key: String,
    value: JsonValue,
}

fun property(key: String, value: JsonValue) -> JsonProperty {
    JsonProperty(key = key, value = value)
}

shape JsonArray {
    elements: List[JsonValue],
}

fun array(elements: List[JsonValue]) -> JsonValue {
    JsonArray(elements = elements)
}

shape JsonNumber {
    value: String,
}

fun number(value: String) -> JsonValue {
    JsonNumber(value = value)
}

shape JsonString {
    value: String,
}

fun string(value: String) -> JsonValue {
    JsonString(value = value)
}

shape JsonBoolean {
    value: Bool,
}

fun boolean(value: Bool) -> JsonValue {
    JsonBoolean(value = value)
}

shape JsonNull {
}

val null = JsonNull();

fun valueToText(value: JsonValue) -> String {
    when (value) {
        is JsonObject {
            val properties = CodePoints.join(",", Lists.map(propertyToText, value.properties));
            "{" + properties + "}"
        }
        is JsonArray {
            val elements = CodePoints.join(",", Lists.map(valueToText, value.elements));
            "[" + elements +  "]"
        }
        is JsonNumber {
            value.value
        }
        is JsonString {
            jsonStringToText(value.value)
        }
        is JsonBoolean {
            if (value.value) {
                "true"
            } else {
                "false"
            }
        }
        is JsonNull {
            "null"
        }
    }
}

fun propertyToText(property: JsonProperty) -> String {
    jsonStringToText(property.key) + ":" + valueToText(property.value)
}

fun jsonStringToText(value: String) -> String {
    val characters = CodePoints.mapCodePoints(jsonStringCodePointToText, value);
    "\"" + characters + "\""
}

fun jsonStringCodePointToText(codePoint: CodePoint) -> String {
    if (codePoint == '\\') {
        "\\\\"
    } else if (codePoint == '\"') {
        "\\\""
    } else if (codePoint == '\t') {
        "\\t"
    } else if (codePoint == '\n') {
        "\\n"
    } else if (codePoint == '\r') {
        "\\r"
    } else if (codePoint < '\u{20}') {
        val hexString = CodePoints.codePointToHexString(codePoint);
        "\\u" + CodePoints.padLeft(4, '0', hexString)
    } else {
        CodePoints.codePointToString(codePoint)
    }
}

fun textToValue(text: String) -> JsonValue {
    val isNotWhitespace = fun (token: Token) -> Bool {
        not (token.tokenType is TokenWhitespace)
    };

    val tokens = tokenise(text) |> Sequences.lazyFilter ~ (isNotWhitespace);
    tokensToValue(tokens)
}

fun tokensToValue(tokens: Sequences.Sequence[Token, Pure]) -> JsonValue {
    val iterator = tokens.next();
    when (iterator) {
        is Sequences.SequenceEnd {
            null
        }
        is Sequences.SequenceItem[Token, Pure] {
            when (iterator.head.tokenType) {
                is TokenTrue {
                    boolean(true)
                }
                is TokenFalse {
                    boolean(false)
                }
                is TokenNull {
                    null
                }
                is TokenWhitespace {
                    null
                }
                is TokenUnexpected {
                    null
                }
            }
        }
    }
}

shape TokenWhitespace {}
shape TokenNull {}
shape TokenTrue {}
shape TokenFalse {}
shape TokenUnexpected {}
union TokenType = TokenWhitespace | TokenNull | TokenTrue | TokenFalse | TokenUnexpected;

shape Token {
    tokenType: TokenType,
    value: String,
}

fun token(tokenType: TokenType, value: String) -> Token {
    Token(tokenType = tokenType, value = value)
}

fun tokenise(value: String) -> Sequences.Sequence[Token, Pure] {
    Sequences.Sequence(
        next = fun () -> Sequences.SequenceIterator[Token, Pure] {
            if (CodePoints.isEmpty(value)) {
                Sequences.end
            } else {
                val token = nextToken(value);
                val remainder = CodePoints.dropLeft(CodePoints.length(token.value), value);
                Sequences.SequenceItem(
                    head = token,
                    tail = tokenise(remainder),
                )
            }
        },
    )
}

fun nextToken(value: String) -> Token {
    if (CodePoints.startsWith("true", value)) {
        token(TokenTrue(), "true")
    } else if (CodePoints.startsWith("false", value)) {
        token(TokenFalse(), "false")
    } else if (CodePoints.startsWith("null", value)) {
        token(TokenNull(), "null")
    } else {
        val whitespace = value |> CodePoints.leftWhile ~ (isWhitespace);
        if (not CodePoints.isEmpty(whitespace)) {
            token(TokenWhitespace(), whitespace)
        } else {
            token(TokenUnexpected(), CodePoints.left(1, value))
        }
    }
}

fun isWhitespace(value: CodePoint) -> Bool {
    // TODO: handle other whitespace characters
    value == ' '
}
