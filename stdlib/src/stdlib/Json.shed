import stdlib.Lists;
import stdlib.Strings;


union JsonValue = JsonObject | JsonArray | JsonNumber | JsonString | JsonBoolean | JsonNull;

shape JsonObject {
    properties: List[JsonProperty],
}

fun object(properties: List[JsonProperty]) -> JsonValue {
    JsonObject(properties = properties)
}

shape JsonProperty {
    key: String,
    value: JsonValue,
}

fun property(key: String, value: JsonValue) -> JsonProperty {
    JsonProperty(key = key, value = value)
}

shape JsonArray {
    elements: List[JsonValue],
}

fun array(elements: List[JsonValue]) -> JsonValue {
    JsonArray(elements = elements)
}

shape JsonNumber {
    value: String,
}

fun number(value: String) -> JsonValue {
    JsonNumber(value = value)
}

shape JsonString {
    value: String,
}

fun string(value: String) -> JsonValue {
    JsonString(value = value)
}

shape JsonBoolean {
    value: Bool,
}

fun boolean(value: Bool) -> JsonValue {
    JsonBoolean(value = value)
}

shape JsonNull {
}

val null = JsonNull();

fun valueToText(value: JsonValue) -> String {
    when (value) {
        is JsonObject {
            val properties = Strings.join(",", Lists.map(propertyToText, value.properties));
            "{" + properties + "}"
        }
        is JsonArray {
            val elements = Strings.join(",", Lists.map(valueToText, value.elements));
            "[" + elements +  "]"
        }
        is JsonNumber {
            value.value
        }
        is JsonString {
            jsonStringToText(value.value)
        }
        is JsonBoolean {
            if (value.value) {
                "true"
            } else {
                "false"
            }
        }
        is JsonNull {
            "null"
        }
    }
}

fun propertyToText(property: JsonProperty) -> String {
    jsonStringToText(property.key) + ":" + valueToText(property.value)
}

fun jsonStringToText(value: String) -> String {
    val characters = Strings.mapCharacters(jsonStringCharacterToText, value);
    "\"" + characters + "\""
}

fun jsonStringCharacterToText(character: Char) -> String {
    if (character == '\\') {
        "\\\\"
    } else if (character == '\"') {
        "\\\""
    } else if (character == '\t') {
        "\\t"
    } else if (character == '\n') {
        "\\n"
    } else if (character == '\r') {
        "\\r"
    } else if (character < '\u{20}') {
        val hexString = Strings.charToHexString(character);
        "\\u" + Strings.padLeft(4, '0', hexString)
    } else {
        Strings.charToString(character)
    }
}

fun textToValue(text: String) -> JsonValue {
    if (text == "true") {
        boolean(true)
    } else if (text == "false") {
        boolean(false)
    } else {
        null
    }
}

fun equals(left: JsonValue, right: JsonValue) -> Bool {
    if (left is JsonNull) {
        right is JsonNull
    } else if (left is JsonBoolean) {
        if (right is JsonBoolean) {
            left.value == right.value
        } else {
            false
        }
    } else {
        false
    }
}
