import stdlib.Lists;


union JsonValue = JsonObject | JsonArray | JsonNumber | JsonString | JsonBoolean | JsonNull;

shape JsonObject memberOf JsonValue {
    properties: List[JsonProperty],
}

shape JsonProperty {
    key: String,
    value: JsonValue,
}

shape JsonArray memberOf JsonValue {
    elements: List[JsonValue],
}

fun array(elements: List[JsonValue]) -> JsonValue {
    JsonArray(elements = elements)
}

shape JsonNumber memberOf JsonValue {
    value: Int,
}

shape JsonString memberOf JsonValue {
    value: String,
}

shape JsonBoolean memberOf JsonValue {
    value: Bool,
}

fun boolean(value: Bool) -> JsonValue {
    JsonBoolean(value = value)
}

shape JsonNull memberOf JsonValue {
}

val null = JsonNull();

fun valueToText(value: JsonValue) -> String {
    when (value) {
        is JsonObject {
            ""
        }
        is JsonArray {
            val elements = Lists.reduce(
                fun (text: String, element: JsonValue) -> String {
                    val elementText = valueToText(element);
                    if (text == "") {
                        elementText
                    } else {
                        text + "," + elementText
                    }
                },
                "",
                value.elements
            );
            "[" + elements +  "]"
        }
        is JsonNumber {
            ""
        }
        is JsonString {
            ""
        }
        is JsonBoolean {
            if (value.value) {
                "true"
            } else {
                "false"
            }
        }
        is JsonNull {
            "null"
        }
    }
}
