import stdlib.Lists;
import stdlib.platform.Strings;

val charToHexString = Strings.charToHexString;
val charToString = Strings.charToString;
val codePointCount = Strings.codePointCount;
val mapCharacters = Strings.mapCharacters;
val replace = Strings.replace;

fun dropLeft(count: Int, value: String) -> String {
    Strings.substring(count, codePointCount(value), value)
}

fun isEmpty(value: String) -> Bool {
    Strings.codePointCount(value) == 0
}

fun join(separator: String, elements: List[String]) -> String {
    Lists.reduce(
        fun (text: String, element: String) -> String {
            if (text == "") {
                element
            } else {
                text + separator + element
            }
        },
        "",
        elements
    )
}

fun left(count: Int, value: String) -> String {
    Strings.substring(0, count, value)
}

fun padLeft(desiredCodePointCount: Int, padding: Char, string: String) -> String {
    Strings.repeat(charToString(padding), desiredCodePointCount - Strings.codePointCount(string)) + string
}

fun startsWith(prefix: String, value: String) -> Bool {
    left(codePointCount(prefix), value) == prefix
}
