shape Some[+T] {
    value: T,
}
shape None {
}
union Option[+T] = Some[T] | None;

fun some[T](value: T) -> Option[T] {
    Some(value = value)
}
val none = None();

fun map[T, R, !E](func: (T) !E -> R, option: Option[T]) !E -> Option[R] {
    when (option) {
        is Some[T] {
            some(func(option.value))
        }
        is None {
            none
        }
    }
}
