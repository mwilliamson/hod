export Option, Some, None, some, none, default, flatMap, map;

union Option[+T] =
    | Some[T] {
        value: T,
    }
    | None;

fun some[T](value: T) -> Option[T] {
    Some(value = value)
}
val none = None();

fun default[T](defaultValue: T, option: Option[T]) -> T {
    when (option) {
        is Some[T] {
            option.value
        }
        is None {
            defaultValue
        }
    }
}

fun flatMap[T, R, !E](func: (T) !E -> Option[R], option: Option[T]) !E -> Option[R] {
    when (option) {
        is Some[T] {
            func(option.value)
        }
        is None {
            none
        }
    }
}

fun map[T, R, !E](func: (T) !E -> R, option: Option[T]) !E -> Option[R] {
    when (option) {
        is Some[T] {
            some(func(option.value))
        }
        is None {
            none
        }
    }
}
