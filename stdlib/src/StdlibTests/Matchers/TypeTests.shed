export testCases;

import M from Stdlib.Matchers;
import Options from Stdlib.Options;
import Tests from Stdlib.Tests;

union X =
    | Y {
        value: Int,
    }
    | Z {
    };

val hasMatcher = M.has("value", fun (value: Y) => value.value, M.isInt(42));

val hasSuite = Tests.suite("has", list(
    Tests.testCase("matches when feature matcher matches", fun () {
        val result = hasMatcher.match(Y(.value = 42));

        Tests.assert(M.isSuccess(result))
    }),

    Tests.testCase("when feature mismatches then mismatches with feature mismatch description", fun () {
        val result = hasMatcher.match(Y(.value = 47));

        when (result) {
            is M.Failure {
                Tests.assert(result.message == "value was 47")
            }
            is M.Success {
                Tests.fail("expected failure but was success")
            }
        }
    }),

    Tests.testCase("description has feature name and description", fun () {
        Tests.assert(hasMatcher.description == "value is 42")
    }),
));

val isTypeMatcher = M.isType[X, Y](
    .description = "Y",
    .describeType = fun (value: X) {
        when (value) {
            is Y { "Y" }
            is Z { "Z" }
        }
    },
    .cast = fun (value: X) {
        if (value is Y) {
            Options.some(value)
        } else {
            Options.none
        }
    },
);

val isTypeSuite = Tests.suite("isType", list(
    Tests.testCase("matches when cast succeeds", fun () {
        val result = isTypeMatcher.match(Y(.value = 42));

        Tests.assert(M.isSuccess(result))
    }),

    Tests.testCase("mismatches with type description when cast fails", fun () {
        val result = isTypeMatcher.match(Z());

        when (result) {
            is M.Failure {
                Tests.assert(result.message == "was Z")
            }
            is M.Success {
                Tests.fail("expected failure but was success")
            }
        }
    }),

    Tests.testCase("description is passed as argument", fun () {
        Tests.assert(isTypeMatcher.description == "Y")
    }),
));

val isTypeWithMatcher = M.isTypeWith[X, Y](
    .description = "Y",
    .describeType = fun (value: X) {
        when (value) {
            is Y { "Y" }
            is Z { "Z" }
        }
    },
    .cast = fun (value: X) {
        if (value is Y) {
            Options.some(value)
        } else {
            Options.none
        }
    },
    .with = M.Matcher(
        .description = "value of 42",
        .match = fun (value: Y) {
            if (value.value == 42) {
                M.success
            } else {
                M.failure("value was " + intToString(value.value))
            }
        }
    ),
);

val isTypeWithSuite = Tests.suite("isTypeWith", list(
    Tests.testCase("matches when cast and with matcher succeeds", fun () {
        val result = isTypeWithMatcher.match(Y(.value = 42));

        Tests.assert(M.isSuccess(result))
    }),

    Tests.testCase("mismatches with type description when cast fails", fun () {
        val result = isTypeWithMatcher.match(Z());

        when (result) {
            is M.Failure {
                Tests.assert(result.message == "was Z")
            }
            is M.Success {
                Tests.fail("expected failure but was success")
            }
        }
    }),

    Tests.testCase("mismatches with with mismatch description when with fails", fun () {
        val result = isTypeWithMatcher.match(Y(.value = 47));

        when (result) {
            is M.Failure {
                Tests.assert(result.message == "value was 47")
            }
            is M.Success {
                Tests.fail("expected failure but was success")
            }
        }
    }),

    Tests.testCase("description has type and with description", fun () {
        Tests.assert(isTypeWithMatcher.description == "Y: value of 42")
    }),
));

val testCases = Tests.suite(moduleName, list(
    hasSuite,
    isTypeSuite,
    isTypeWithSuite,
));
