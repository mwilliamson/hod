export testCases;

import Stdlib.Lists;
import Stdlib.Matchers;
import Stdlib.Strings.CodePoints;
import Stdlib.Tests;

fun lengthTestCase(string: String, expectedCount: Int) -> Tests.TestCase {
    Tests.testCase(string, fun () {
        val count = CodePoints.length(string);
        Tests.assertThat(count, Matchers.isInt(expectedCount))
    })
}

val testCases = Tests.suite(moduleName, list(
    Tests.suite("length", list(
        lengthTestCase("", 0),
        lengthTestCase("a", 1),
        lengthTestCase("abc", 3),
        lengthTestCase("☃", 1),
        lengthTestCase("𝔼", 1),
        lengthTestCase("☃𝔼☃𝔼☃", 5),
    )),

    Tests.suite("join", list(
        Tests.testCase("empty iterable is joined to empty string", fun () {
            val result = CodePoints.join(", ", list());
            Tests.assertThat(result, Matchers.isString(""))
        }),

        Tests.testCase("singleton iterable is joined without separator", fun () {
            val result = CodePoints.join(", ", list("apple"));
            Tests.assertThat(result, Matchers.isString("apple"))
        }),

        Tests.testCase("iterable with multiple values is joined with separator", fun () {
            val result = CodePoints.join(", ", list("apple", "banana", "coconut"));
            Tests.assertThat(result, Matchers.isString("apple, banana, coconut"))
        }),
    )),
));

