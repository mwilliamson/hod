export testCases;

import Lists from Stdlib.Lists;
import @(.list as list) from Stdlib.Lists;
import Matchers from Stdlib.Matchers;
import Strings from Stdlib.Platform.Strings;
import Tests from Stdlib.Tests;

fun codePointCountTestCase(string: String, expectedCount: Int) -> Tests.TestCase {
    Tests.testCase(string, fun () {
        val count = Strings.codePointCount(string);
        Tests.assertThat(count, Matchers.isInt(expectedCount))
    })
}

val codePointCountTestSuite = Tests.suite("codePointCount", list(
    codePointCountTestCase("", 0),
    codePointCountTestCase("a", 1),
    codePointCountTestCase("abc", 3),
    codePointCountTestCase("☃", 1),
    codePointCountTestCase("𝔼", 1),
    codePointCountTestCase("☃𝔼☃𝔼☃", 5),
));

val dropLeftCodePointsTestSuite = Tests.suite("dropLeftCodePoints", list(
    Tests.testCase("characters in BMP, positive count", fun() {
        val string = "abcdef";

        val result = Strings.dropLeftCodePoints(2, string);

        Tests.assertThat(result, Matchers.isString("cdef"))
    }),

    Tests.testCase("characters outside BMP, positive count", fun() {
        val string = "𝔼bcdef";

        val result = Strings.dropLeftCodePoints(2, string);

        Tests.assertThat(result, Matchers.isString("cdef"))
    }),

    Tests.testCase("characters in BMP, negative count", fun() {
        val string = "abcdef";

        val result = Strings.dropLeftCodePoints(-2, string);

        Tests.assertThat(result, Matchers.isString("ef"))
    }),

    Tests.testCase("characters outside BMP, negative count", fun() {
        val string = "abcd𝔼f";

        val result = Strings.dropLeftCodePoints(-2, string);

        Tests.assertThat(result, Matchers.isString("𝔼f"))
    }),

    Tests.testCase("when positive count is equal to string code point count then empty string is returned", fun() {
        val string = "abcdef";

        val result = Strings.dropLeftCodePoints(6, string);

        Tests.assertThat(result, Matchers.isString(""))
    }),

    Tests.testCase("when positive count is larger than string then empty string is returned", fun() {
        val string = "abcdef";

        val result = Strings.dropLeftCodePoints(7, string);

        Tests.assertThat(result, Matchers.isString(""))
    }),

    Tests.testCase("when negative count is equal to string code point count then entire string is returned", fun() {
        val string = "abcdef";

        val result = Strings.dropLeftCodePoints(-6, string);

        Tests.assertThat(result, Matchers.isString("abcdef"))
    }),

    Tests.testCase("when negative count is larger than string then entire string is returned", fun() {
        val string = "abcdef";

        val result = Strings.dropLeftCodePoints(-7, string);

        Tests.assertThat(result, Matchers.isString("abcdef"))
    }),
));

val testCases = Tests.suite(moduleName, list(
    codePointCountTestSuite,
    dropLeftCodePointsTestSuite,
));

