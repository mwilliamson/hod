export
    JsonValue,
    JsonObject,
    JsonArray,
    JsonNumber,
    JsonString,
    JsonBoolean,
    JsonNull,
    JsonProperty,

    object,
    array,
    number,
    string,
    boolean,
    null,
    property,

    valueToText,
    JsonResult,
    JsonSuccess,
    JsonFailure,
    textToValue;

import .ListBuilder;
import .Lists;
import .Options;
import .Sequences;
import .Strings.CodePoints;
import .Unfold;


union JsonValue =
    | JsonObject {
        properties: List[JsonProperty],
    }
    | JsonArray {
        elements: List[JsonValue],
    }
    | JsonNumber {
        value: String,
    }
    | JsonString {
        value: String,
    }
    | JsonBoolean {
        value: Bool,
    }
    | JsonNull;

fun object(properties: List[JsonProperty]) -> JsonValue {
    JsonObject(properties = properties)
}

shape JsonProperty {
    key: String,
    value: JsonValue,
}

fun property(key: String, value: JsonValue) -> JsonProperty {
    JsonProperty(key = key, value = value)
}

fun array(elements: List[JsonValue]) -> JsonValue {
    JsonArray(elements = elements)
}

fun number(value: String) -> JsonValue {
    JsonNumber(value = value)
}

fun string(value: String) -> JsonValue {
    JsonString(value = value)
}

fun boolean(value: Bool) -> JsonValue {
    JsonBoolean(value = value)
}

val null = JsonNull();

fun valueToText(value: JsonValue) -> String {
    when (value) {
        is JsonObject {
            val properties = CodePoints.join(",", Lists.map(propertyToText, value.properties));
            "{" + properties + "}"
        }
        is JsonArray {
            val elements = CodePoints.join(",", Lists.map(valueToText, value.elements));
            "[" + elements +  "]"
        }
        is JsonNumber {
            value.value
        }
        is JsonString {
            jsonStringToText(value.value)
        }
        is JsonBoolean {
            if (value.value) {
                "true"
            } else {
                "false"
            }
        }
        is JsonNull {
            "null"
        }
    }
}

fun propertyToText(property: JsonProperty) -> String {
    jsonStringToText(property.key) + ":" + valueToText(property.value)
}

fun jsonStringToText(value: String) -> String {
    val characters = CodePoints.flatMap(jsonStringCodePointToText, value);
    "\"" + characters + "\""
}

fun jsonStringCodePointToText(codePoint: CodePoint) -> String {
    if (codePoint == '\\') {
        "\\\\"
    } else if (codePoint == '\"') {
        "\\\""
    } else if (codePoint == '\t') {
        "\\t"
    } else if (codePoint == '\n') {
        "\\n"
    } else if (codePoint == '\r') {
        "\\r"
    } else if (codePoint < '\u{20}') {
        val hexString = CodePoints.codePointToHexString(codePoint);
        "\\u" + CodePoints.padLeft(4, '0', hexString)
    } else {
        CodePoints.codePointToString(codePoint)
    }
}

union JsonResult =
    | JsonSuccess {
        value: JsonValue,
    }
    | JsonFailure;

fun textToValue(text: String) -> JsonResult {
    val tokens = Sequences.lazyFilter(
        fun (token: Token) => not (token.tokenType is TokenWhitespace),
        tokenise(text),
    );
    tokensToValue(createTokenIterator(tokens))
}

fun tokensToValue(tokens: TokenIterator) -> JsonResult {
    val result = readValue(tokens);
    when (result) {
        is ParseSuccess {
            if (isNextTokenType(
                fun (tokenType: TokenType) => tokenType is TokenEnd,
                result.remainder,
            )) {
                JsonSuccess(value = result.value)
            } else {
                JsonFailure()
            }
        }
        is ParseFailure {
            JsonFailure()
        }
    }
}

shape TokenIterator {
    head: Token,
    tail: () -> TokenIterator,
}

union ParseResult[+T] =
    | ParseSuccess[T] {
        remainder: TokenIterator,
        value: T,
    }
    | ParseFailure {
        remainder: TokenIterator,
    };

fun success[T](remainder: TokenIterator, value: T) -> ParseResult[T] {
    ParseSuccess(remainder = remainder, value = value)
}

fun failure(tokens: TokenIterator) -> ParseResult[Nothing] {
    ParseFailure(remainder = tokens)
}

fun readValue(tokens: TokenIterator) -> ParseResult[JsonValue] {
    when (tokens.head.tokenType) {
        is TokenTrue {
            success(tokens.tail(), boolean(true))
        }
        is TokenFalse {
            success(tokens.tail(), boolean(false))
        }
        is TokenNull {
            success(tokens.tail(), null)
        }
        is TokenOpenSquare {
            val elementsResult = parseMany(
                parseElement = readValue,
                parseSeparator = skipTokenType ~ (fun (tokenType: TokenType) => tokenType is TokenComma),
                isEnd = isNextTokenType ~ (fun (tokenType: TokenType) => tokenType is TokenCloseSquare),
            )(tokens.tail());

            when (elementsResult) {
                is ParseSuccess {
                    val closeResult = skipTokenType(
                        fun (tokenType: TokenType) => tokenType is TokenCloseSquare,
                        elementsResult.remainder,
                    );
                    when (closeResult) {
                        is ParseSuccess {
                            success(closeResult.remainder, array(elementsResult.value))
                        }
                        is ParseFailure {
                            failure(closeResult.remainder)
                        }
                    }
                }

                is ParseFailure {
                    elementsResult
                }
            }
        }
        else {
            failure(tokens)
        }
    }
}

union Position = Start | ElementStart | ElementEnd;

shape State[T] {
    elements: ListBuilder.Builder[T],
    position: Position,
    tokens: TokenIterator,
}

fun parseMany[T](
    *,
    parseElement: (TokenIterator) -> ParseResult[T],
    parseSeparator: (TokenIterator) -> ParseResult[Unit],
    isEnd: (TokenIterator) -> Bool,
) -> (TokenIterator) -> ParseResult[List[T]] {
    fun parse(state: State[T]) -> ParseResult[List[T]] {
        when (state.position) {
            is Start {
                if (isEnd(state.tokens)) {
                    success(state.tokens, list())
                } else {
                    // TODO: use update()
                    parse(State(
                        elements = state.elements,
                        position = ElementStart(),
                        tokens = state.tokens
                    ))
                }
            }
            is ElementStart {
                val elementResult = parseElement(state.tokens);
                when (elementResult) {
                    is ParseSuccess {
                        parse(State(
                            elements = ListBuilder.append(state.elements, elementResult.value),
                            position = ElementEnd(),
                            tokens = elementResult.remainder,
                        ))
                    }
                    is ParseFailure {
                        elementResult
                    }
                }
            }
            is ElementEnd {
                if (isEnd(state.tokens)) {
                    success(state.tokens, ListBuilder.toList(state.elements))
                } else {
                    val separatorResult = parseSeparator(state.tokens);
                    when (separatorResult) {
                        is ParseSuccess {
                            parse(State(
                                elements = state.elements,
                                position = ElementStart(),
                                tokens = separatorResult.remainder,
                            ))
                        }
                        is ParseFailure {
                            separatorResult
                        }
                    }
                }
            }
        }
    }

    fun (tokens: TokenIterator) -> ParseResult[List[T]] {
        val initialState = State[T](elements = ListBuilder.builder(), position = Start(), tokens = tokens);
        parse(initialState)
    }
}

fun isNextTokenType(predicate: (TokenType) -> Bool, tokens: TokenIterator) -> Bool {
    predicate(tokens.head.tokenType)
}

fun skipTokenType(predicate: (TokenType) -> Bool, tokens: TokenIterator) -> ParseResult[Unit] {
    if (predicate(tokens.head.tokenType)) {
        success(tokens.tail(), unit)
    } else {
        failure(tokens)
    }
}

fun createTokenIterator(tokens: Sequences.Sequence[Token, Pure]) -> TokenIterator {
    val iterator = tokens.next();
    when (iterator) {
        is Sequences.SequenceEnd {
            TokenIterator(
                head = token(TokenEnd(), ""),
                tail = fun () => createTokenIterator(tokens),
            )
        }
        is Sequences.SequenceItem {
            TokenIterator(
                head = iterator.head,
                tail = fun () => createTokenIterator(iterator.tail),
            )
        }
    }
}

union TokenType = TokenWhitespace | TokenNull | TokenTrue | TokenFalse | TokenOpenSquare | TokenCloseSquare | TokenComma | TokenUnexpected | TokenEnd;

shape Token {
    tokenType: TokenType,
    value: String,
}

fun token(tokenType: TokenType, value: String) -> Token {
    Token(tokenType = tokenType, value = value)
}

fun nextToken(value: String) -> Token {
    val maybeFirst = CodePoints.first(value);
    when (maybeFirst) {
        is Options.Some {
            val first = maybeFirst.value;
            if (first == 't' && CodePoints.startsWith("true", value)) {
                token(TokenTrue(), "true")
            } else if (first == 'f' && CodePoints.startsWith("false", value)) {
                token(TokenFalse(), "false")
            } else if (first == 'n' && CodePoints.startsWith("null", value)) {
                token(TokenNull(), "null")
            } else if (first == '[') {
                token(TokenOpenSquare(), "[")
            } else if (first == ']') {
                token(TokenCloseSquare(), "]")
            } else if (first == ',') {
                token(TokenComma(), ",")
            } else if (isWhitespace(first)) {
                val whitespace = value |> CodePoints.leftWhile ~ (isWhitespace);
                token(TokenWhitespace(), whitespace)
            } else {
                token(TokenUnexpected(), CodePoints.left(1, value))
            }
        }
        is Options.None {
            token(TokenEnd(), "")
        }
    }
}

fun isWhitespace(value: CodePoint) -> Bool {
    value == ' ' || value == '\n' || value == '\r' || value == '\t'
}

val tokenise = Unfold.unfold ~ (fun (value: String) -> Unfold.Next[Token, String] {
    val token = nextToken(value);
    if (token.tokenType is TokenEnd) {
        Unfold.end
    } else {
        val remainder = CodePoints.dropLeft(CodePoints.length(token.value), value);
        Unfold.continue(token, remainder)
    }
});
