export
    Sequence,
    SequenceIterator,
    SequenceItem,
    SequenceEnd,
    end,

    pure,

    all,
    any,
    foldLeft,
    forEach,
    lazyFilter,
    lazyFlatten,
    lazyMap;

shape Sequence[T, !E] {
    next: Fun () !E -> SequenceIterator[T, E],
}

union SequenceIterator[T, !E] =
    | SequenceItem[T, E] {
        head: T,
        tail: Sequence[T, E],
    }
    | SequenceEnd;

val end = SequenceEnd();

fun pure[T](next: Fun () -> SequenceIterator[T, Pure]) -> Sequence[T, Pure] {
    Sequence(.next = next)
}

fun all[!E](sequence: Sequence[Bool, E]) !E -> Bool {
    val item = sequence.next!();
    when (item) {
        is SequenceEnd {
            true
        }
        is SequenceItem {
            if (item.head) {
                tailrec all!(item.tail)
            } else {
                false
            }
        }
    }
}

fun any[!E](sequence: Sequence[Bool, E]) !E -> Bool {
    val item = sequence.next!();
    when (item) {
        is SequenceEnd {
            false
        }
        is SequenceItem {
            if (item.head) {
                true
            } else {
                tailrec any!(item.tail)
            }
        }
    }
}

fun lazyFlatten[T, !E](sequences: Sequence[Sequence[T, E], E]) -> Sequence[T, E] {
    Sequence(
        .next = fun() !E -> SequenceIterator[T, E] {
            val item = sequences.next!();
            when (item) {
                is SequenceEnd {
                    end
                }
                is SequenceItem {
                    flatten2!(item.head, item.tail)
                }
            }
        }
    )
}

fun flatten2[T, !E](current: Sequence[T, E], rest: Sequence[Sequence[T, E], E]) !E -> SequenceIterator[T, E] {
    val item = current.next!();
    when (item) {
        is SequenceEnd {
            lazyFlatten(rest).next!()
        }
        is SequenceItem {
            SequenceItem(
                .head = item.head,
                .tail = Sequence(
                    .next = fun() !E -> SequenceIterator[T, E] {
                        flatten2!(item.tail, rest)
                    },
                ),
            )
        }
    }
}

fun foldLeft[T, R, !E](func: Fun (R, T) !E -> R, initial: R, sequence: Sequence[T, E]) !E -> R {
    val item = sequence.next!();
    when (item) {
        is SequenceEnd {
            initial
        }
        is SequenceItem {
            tailrec foldLeft!(func, func!(initial, item.head), item.tail)
        }
    }
}


fun forEach[T, !E](func: Fun (T) !E -> Unit, sequence: Sequence[T, E]) !E -> Unit {
    val item = sequence.next!();
    when (item) {
        is SequenceEnd {
            unit
        }
        is SequenceItem {
            func!(item.head);
            tailrec forEach!(func, item.tail)
        }
    }
}

fun lazyFilter[T, !E](predicate: Fun (T) !E -> Bool, sequence: Sequence[T, E]) -> Sequence[T, E] {
    Sequence(
        .next = fun () !E -> SequenceIterator[T, E] {
            val item = sequence.next!();
            when (item) {
                is SequenceEnd {
                    end
                }
                is SequenceItem {
                    val tail = lazyFilter(predicate, item.tail);
                    if (predicate!(item.head)) {
                        SequenceItem(
                            .head = item.head,
                            .tail = tail,
                        )
                    } else {
                        tail.next!()
                    }
                }
            }
        }
    )
}

fun lazyMap[T, R, !E](func: Fun (T) !E -> R, sequence: Sequence[T, E]) -> Sequence[R, E] {
    Sequence(
        .next = fun () !E -> SequenceIterator[R, E] {
            val item = sequence.next!();
            when (item) {
                is SequenceEnd {
                    end
                }
                is SequenceItem {
                    SequenceItem(
                        .head = func!(item.head),
                        .tail = lazyMap(func, item.tail),
                    )
                }
            }
        }
    )
}
