export
    Matcher,

    Result,
    Success,
    Failure,
    success,
    failure,
    isSuccess,

    anything,
    isInt,
    isString,
    isNone,
    isSome;

import Options from .Options;
import @(
    .Matcher as Matcher,
    .Result as Result,
    .Success as Success,
    .Failure as Failure,
    .success as success,
    .failure as failure,
    .isSuccess as isSuccess,
) from .Matchers.Core;
import @(
    .isInt as isInt,
    .isString as isString,
) from .Matchers.Equality;

fun anything() -> Matcher[Any] {
    Matcher(
        .description = "anything",
        .match = fun (x: Any) => success,
    )
}

fun isNone() -> Matcher[Options.Option[Any]] {
    Matcher(
        .description = "none",
        .match = fun (actual: Options.Option[Any]) -> Result {
            if (actual is Options.None) {
                success
            } else {
                failure("was some()")
            }
        }
    )
}

fun isSome[T](matcher: Matcher[T]) -> Matcher[Options.Option[T]] {
    Matcher(
        .description = "option with value " + matcher.description,
        .match = fun (actual: Options.Option[T]) -> Result {
            if (actual is Options.Some[T]) {
                matcher.match(actual.value)
            } else {
                failure("was none")
            }
        }
    )
}
