import stdlib.Lists;
import stdlib.Matchers;
import stdlib.Strings;
import stdlib.Tests;

fun codePointCountTestCase(string: String, expectedCount: Int) -> Tests.TestCase {
    Tests.testCase(string, fun () {
        val count = Strings.codePointCount(string);
        Tests.assertThat(count, Matchers.isInteger(expectedCount))
    })
}

val testCases = Tests.suite("StringsTests", list(
    Tests.suite("codePointCount", list(
        codePointCountTestCase("", 0),
        codePointCountTestCase("a", 1),
        codePointCountTestCase("abc", 3),
        codePointCountTestCase("☃", 1),
        codePointCountTestCase("𝔼", 1),
        codePointCountTestCase("☃𝔼☃𝔼☃", 5),
    )),

    Tests.suite("join", list(
        Tests.testCase("empty iterable is joined to empty string", fun () {
            val result = Strings.join(", ", list());
            Tests.assertThat(result, Matchers.isString(""))
        }),

        Tests.testCase("singleton iterable is joined without separator", fun () {
            val result = Strings.join(", ", list("apple"));
            Tests.assertThat(result, Matchers.isString("apple"))
        }),

        Tests.testCase("iterable with multiple values is joined with separator", fun () {
            val result = Strings.join(", ", list("apple", "banana", "coconut"));
            Tests.assertThat(result, Matchers.isString("apple, banana, coconut"))
        }),
    )),
));

