import stdlib.Json;
import stdlib.Matchers;
import stdlib.Options;
import stdlib.Tests;

fun isJson(expected: Json.JsonValue) -> Matchers.Matcher[Json.JsonValue] {
    Matchers.describingMatcher(
        expected,
        Json.valueToText,
        Json.equals ~ (expected),
    )
}

val isJsonNull = isJson(Json.null);

fun isJsonBoolean(value: Bool) -> Matchers.Matcher[Json.JsonValue] {
    isJson(Json.boolean(value))
}

val testCases = Tests.suite(moduleName, list(
    Tests.suite("valueToText", list(
        Tests.testCase("null", fun () {
            val value = Json.null;
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("null"))
        }),

        Tests.testCase("true", fun () {
            val value = Json.boolean(true);
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("true"))
        }),

        Tests.testCase("false", fun () {
            val value = Json.boolean(false);
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("false"))
        }),

        Tests.testCase("number", fun () {
            val value = Json.number("1.2");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("1.2"))
        }),

        Tests.testCase("empty string", fun () {
            val value = Json.string("");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"\""))
        }),

        Tests.testCase("string without special characters", fun () {
            val value = Json.string("apples");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"apples\""))
        }),

        Tests.testCase("backslashes are escaped", fun () {
            val value = Json.string("\\ \\");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"\\\\ \\\\\""))
        }),

        Tests.testCase("double quotes are escaped", fun () {
            val value = Json.string("\" \"");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"\\\" \\\"\""))
        }),

        Tests.testCase("tabs are escaped", fun () {
            val value = Json.string("\t \t");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"\\t \\t\""))
        }),

        Tests.testCase("line feeds are escaped", fun () {
            val value = Json.string("\n \n");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"\\n \\n\""))
        }),

        Tests.testCase("carriage returns are escaped", fun () {
            val value = Json.string("\r \r");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"\\r \\r\""))
        }),

        Tests.testCase("control codes are escaped", fun () {
            val value = Json.string("\u{B}");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"\\u000B\""))
        }),

        Tests.testCase("empty array is serialised to square brackets", fun () {
            val value = Json.array(list());
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("[]"))
        }),

        Tests.testCase("singleton array is serialised to square brackets containing element", fun () {
            val value = Json.array(list(Json.null));
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("[null]"))
        }),

        Tests.testCase("array elements are comma separated", fun () {
            val value = Json.array(list(Json.null, Json.boolean(true), Json.boolean(false)));
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("[null,true,false]"))
        }),

        Tests.testCase("empty object is serialised to curly braces", fun () {
            val value = Json.object(list());
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("{}"))
        }),

        Tests.testCase("singleton object is serialised to curly braces containing property", fun () {
            val value = Json.object(list(Json.property("apples", Json.null)));
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("{\"apples\":null}"))
        }),

        Tests.testCase("object properties are comma separated", fun () {
            val value = Json.object(list(
                Json.property("apples", Json.null),
                Json.property("bananas", Json.boolean(true)),
                Json.property("coconut", Json.boolean(false)),
            ));
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("{\"apples\":null,\"bananas\":true,\"coconut\":false}"))
        }),
    )),

    Tests.suite("textToValue", list(
        Tests.testCase("null", fun () {
            val text = "null";
            val value = Json.textToValue(text);
            Tests.assertThat(value, isJsonNull)
        }),

        Tests.testCase("true", fun () {
            val text = "true";
            val value = Json.textToValue(text);
            Tests.assertThat(value, isJsonBoolean(true))
        }),

        Tests.testCase("false", fun () {
            val text = "false";
            val value = Json.textToValue(text);
            Tests.assertThat(value, isJsonBoolean(false))
        }),

        Tests.testCase("whitespace is ignored", fun () {
            val text = "  false";
            val value = Json.textToValue(text);
            Tests.assertThat(value, isJsonBoolean(false))
        }),
    )),
));
