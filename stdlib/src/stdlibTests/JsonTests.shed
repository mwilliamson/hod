import stdlib.Json;
import stdlib.Matchers;
import stdlib.Options;
import stdlib.Tests;

val testCases = Tests.suite("JsonTests", list(
    Tests.suite("valueToText", list(
        Tests.testCase("null", fun () {
            val value = Json.null;
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("null"))
        }),

        Tests.testCase("true", fun () {
            val value = Json.boolean(true);
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("true"))
        }),

        Tests.testCase("false", fun () {
            val value = Json.boolean(false);
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("false"))
        }),

        Tests.testCase("number", fun () {
            val value = Json.number("1.2");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("1.2"))
        }),

        Tests.testCase("empty string", fun () {
            val value = Json.string("");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"\""))
        }),

        Tests.testCase("string without special characters", fun () {
            val value = Json.string("apples");
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("\"apples\""))
        }),

        Tests.testCase("empty array is serialised to square brackets", fun () {
            val value = Json.array(list());
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("[]"))
        }),

        Tests.testCase("singleton array is serialised to square brackets containing element", fun () {
            val value = Json.array(list(Json.null));
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("[null]"))
        }),

        Tests.testCase("array elements are comma separated", fun () {
            val value = Json.array(list(Json.null, Json.boolean(true), Json.boolean(false)));
            val text = Json.valueToText(value);
            Tests.assertThat(text, Matchers.isString("[null,true,false]"))
        }),
    )),
));

